{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shagu\\\\OneDrive\\\\Desktop\\\\better-internship-project\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n  useEffect(() => {\n    fetchComments();\n  }, []);\n  const fetchComments = () => {\n    fetch(\"http://localhost:5000/comments\").then(res => res.json()).then(data => setComments(data)).catch(err => console.error(\"Fetch error:\", err));\n  };\n  const handleAddComment = () => {\n    if (!newComment.trim()) return;\n    fetch(\"http://localhost:5000/comments\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        comment: newComment\n      }) // ✅ backend expects \"comment\", not \"content\"\n    }).then(res => {\n      if (!res.ok) throw new Error(\"Failed to add comment\");\n      return res.json();\n    }).then(() => {\n      fetchComments(); // ✅ Refresh the list after adding\n      setNewComment(\"\"); // ✅ Clear input\n    }).catch(err => console.error(\"Add error:\", err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"2rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newComment,\n      placeholder: \"Enter comment...\",\n      onChange: e => setNewComment(e.target.value),\n      style: {\n        padding: \"0.5rem\",\n        width: \"300px\",\n        marginRight: \"1rem\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddComment,\n      children: \"Add Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"2rem\"\n      },\n      children: comments.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No comments yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: comment\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this) // ✅ Use index since comment is a string\n        )\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+OVXuOcjEFRN/kXBrT9MF+duWSc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","App","_s","comments","setComments","newComment","setNewComment","fetchComments","fetch","then","res","json","data","catch","err","console","error","handleAddComment","trim","method","headers","body","JSON","stringify","comment","ok","Error","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","placeholder","onChange","e","target","width","marginRight","onClick","marginTop","length","map","index","_c","$RefreshReg$"],"sources":["C:/Users/shagu/OneDrive/Desktop/better-internship-project/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n\n  useEffect(() => {\n    fetchComments();\n  }, []);\n\n  const fetchComments = () => {\n    fetch(\"http://localhost:5000/comments\")\n      .then((res) => res.json())\n      .then((data) => setComments(data))\n      .catch((err) => console.error(\"Fetch error:\", err));\n  };\n\n  const handleAddComment = () => {\n    if (!newComment.trim()) return;\n\n    fetch(\"http://localhost:5000/comments\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ comment: newComment }), // ✅ backend expects \"comment\", not \"content\"\n    })\n      .then((res) => {\n        if (!res.ok) throw new Error(\"Failed to add comment\");\n        return res.json();\n      })\n      .then(() => {\n        fetchComments(); // ✅ Refresh the list after adding\n        setNewComment(\"\"); // ✅ Clear input\n      })\n      .catch((err) => console.error(\"Add error:\", err));\n  };\n\n  return (\n    <div style={{ padding: \"2rem\" }}>\n      <h1>Comments</h1>\n      <input\n        type=\"text\"\n        value={newComment}\n        placeholder=\"Enter comment...\"\n        onChange={(e) => setNewComment(e.target.value)}\n        style={{ padding: \"0.5rem\", width: \"300px\", marginRight: \"1rem\" }}\n      />\n      <button onClick={handleAddComment}>Add Comment</button>\n\n      <div style={{ marginTop: \"2rem\" }}>\n        {comments.length === 0 ? (\n          <p>No comments yet</p>\n        ) : (\n          <ul>\n            {comments.map((comment, index) => (\n              <li key={index}>{comment}</li> // ✅ Use index since comment is a string\n            ))}\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACdU,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,aAAa,GAAGA,CAAA,KAAM;IAC1BC,KAAK,CAAC,gCAAgC,CAAC,CACpCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAKR,WAAW,CAACQ,IAAI,CAAC,CAAC,CACjCC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEF,GAAG,CAAC,CAAC;EACvD,CAAC;EAED,MAAMG,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAI,CAACZ,UAAU,CAACa,IAAI,CAAC,CAAC,EAAE;IAExBV,KAAK,CAAC,gCAAgC,EAAE;MACtCW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,OAAO,EAAEnB;MAAW,CAAC,CAAC,CAAE;IACjD,CAAC,CAAC,CACCI,IAAI,CAAEC,GAAG,IAAK;MACb,IAAI,CAACA,GAAG,CAACe,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MACrD,OAAOhB,GAAG,CAACC,IAAI,CAAC,CAAC;IACnB,CAAC,CAAC,CACDF,IAAI,CAAC,MAAM;MACVF,aAAa,CAAC,CAAC,CAAC,CAAC;MACjBD,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,CACDO,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,YAAY,EAAEF,GAAG,CAAC,CAAC;EACrD,CAAC;EAED,oBACEd,OAAA;IAAK2B,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC9B7B,OAAA;MAAA6B,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBjC,OAAA;MACEkC,IAAI,EAAC,MAAM;MACXC,KAAK,EAAE9B,UAAW;MAClB+B,WAAW,EAAC,kBAAkB;MAC9BC,QAAQ,EAAGC,CAAC,IAAKhC,aAAa,CAACgC,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAE;MAC/CR,KAAK,EAAE;QAAEC,OAAO,EAAE,QAAQ;QAAEY,KAAK,EAAE,OAAO;QAAEC,WAAW,EAAE;MAAO;IAAE;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnE,CAAC,eACFjC,OAAA;MAAQ0C,OAAO,EAAEzB,gBAAiB;MAAAY,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAEvDjC,OAAA;MAAK2B,KAAK,EAAE;QAAEgB,SAAS,EAAE;MAAO,CAAE;MAAAd,QAAA,EAC/B1B,QAAQ,CAACyC,MAAM,KAAK,CAAC,gBACpB5C,OAAA;QAAA6B,QAAA,EAAG;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,gBAEtBjC,OAAA;QAAA6B,QAAA,EACG1B,QAAQ,CAAC0C,GAAG,CAAC,CAACrB,OAAO,EAAEsB,KAAK,kBAC3B9C,OAAA;UAAA6B,QAAA,EAAiBL;QAAO,GAAfsB,KAAK;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC,CAAC;QAChC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA;IACL;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC/B,EAAA,CA7DQD,GAAG;AAAA8C,EAAA,GAAH9C,GAAG;AA+DZ,eAAeA,GAAG;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}